Open Scope list_scope.

Require Import List.

Require Import String.
Require Import Ascii.
Open Scope string_scope.

Inductive unitres :=
| E
| subsumption : list string -> unitres
| resolution : list string -> list string -> unitres.

Definition listA := ("a"::"b"::"d"::nil).
Definition s : unitres := resolution listA listA.
Check s.

(*----------------------------------------------------------------*)

Fixpoint eq_nat n m {struct n} : bool :=
  match n, m with
    | O, O => true
    | O, S _ => false
    | S _, O => false
    | S n1, S m1 => eq_nat n1 m1
  end.

Fixpoint omit (l:list string) (c:nat) {struct l} : unitres :=
    match l with
      | nil => E
      | a :: tail => if (eq_nat c 0) then tail else a :: omit tail (c-1)
    end.

Compute omit ("a"::"b"::"c"::nil) 0.